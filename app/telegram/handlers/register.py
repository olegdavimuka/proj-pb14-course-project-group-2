from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from keyboards.age_register_kb import age_keyboard
from keyboards.city_register_kb import city_keyboard
from keyboards.occupation_register_kb import occupation_keyboard
from states.register import RegisterState


# from app.db.user_repository import add_user


AGE_RANGES = ["18-24", "25-36", "37-50", "51-..."]
CITY_OPTIONS = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–î–Ω—ñ–ø—Ä–æ", "–û–¥–µ—Å–∞"]
OCCUPATION_OPTIONS = [
    "Dev&Data Science",
    "Marketing",
    "Management",
    "Graphics",
    "Interface Design",
]


async def start_register(message: Message, state: FSMContext):
    await message.answer(
        "–†–æ–∑–ø–æ—á–Ω–µ–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏üìì \n‚ú® –í–∫–∞–∂—ñ—Ç—å –í–∞—à–µ —ñ–º º—è ‚ú®"
    )
    await state.set_state(RegisterState.reg_name)


async def register_name(message: Message, state: FSMContext):
    await message.answer(
        f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, {message.text}!\n ‚ú® –í–∫–∞–∂—ñ—Ç—å –í–∞—à –≤—ñ–∫ ‚ú®\n",
        reply_markup=age_keyboard,
    )
    await state.update_data(reg_name=message.text)
    await state.set_state(RegisterState.reg_age)


async def register_age(message: Message, state: FSMContext):
    selected_age = message.text
    if selected_age not in AGE_RANGES:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")
    else:
        await message.answer(
            "‚ú® –í–∫–∞–∂—ñ—Ç—å –í–∞—àe –º—ñ—Å—Ç–æ ‚ú®\n", reply_markup=city_keyboard
        )
        await state.update_data(reg_age=message.text)
        await state.set_state(RegisterState.reg_city)


async def register_city(message: Message, state: FSMContext):
    selected_age = message.text
    if selected_age not in CITY_OPTIONS:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")
    else:
        await message.answer(
            "‚ú® –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ ‚ú®\n",
            reply_markup=occupation_keyboard,
        )
        await state.update_data(reg_city=message.text)
        await state.set_state(RegisterState.reg_occupation)


async def register_occupation(message: Message, state: FSMContext):
    selected_occupation = message.text

    if selected_occupation not in OCCUPATION_OPTIONS:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ñ–µ—Ä—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫."
        )
    else:
        await message.answer("‚ú® –í–∫–∞–∂—ñ—Ç—å –í–∞—à—ñ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ ‚ú®\n")
        await state.update_data(reg_occupation=message.text)
        await state.set_state(RegisterState.reg_interests)


async def register_interests(message: Message, state: FSMContext):
    await state.update_data(reg_interests=message.text)

    reg_data = await state.get_data()
    register_name = reg_data.get("reg_name")
    register_age = reg_data.get("reg_age")
    register_city = reg_data.get("reg_city")
    register_occupation = reg_data.get("reg_occupation")
    register_interests = reg_data.get("reg_interests")

    msg = f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å: \n–Ü–º º—è: {register_name} \n–í—ñ–∫: {register_age} \n–ú—ñ—Å—Ç–æ: {register_city} \n –°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ: {register_occupation}\n–Ü–Ω—Ç–µ—Ä–µ—Å–∏: {register_interests}\n"
    await message.answer(msg)

    # add_user(reg_data)
    await state.clear()
